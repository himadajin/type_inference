use std::str::FromStr;
use crate::ast::{Expr, BinOp};

grammar;


pub Expr: Expr = {
    Or,
};

Or: Expr = {
    <lhs: Or> "||" <rhs: And> => Expr::BinOp(Box::new(lhs), BinOp::Or, Box::new(rhs)),
    And,
}


And: Expr = {
    <lhs: And> "&&" <rhs: Relational> => Expr::BinOp(Box::new(lhs), BinOp::And, Box::new(rhs)),
    Relational,
};


Relational: Expr = {
    <lhs: Add> "<" <rhs: Add> => Expr::BinOp(Box::new(lhs), BinOp::Lt, Box::new(rhs)),
    <lhs: Add> ">" <rhs: Add> => Expr::BinOp(Box::new(lhs), BinOp::Gt, Box::new(rhs)),
    Add,
}

Add: Expr = {
    <lhs: Add> "+" <rhs: Mul> => Expr::BinOp(Box::new(lhs), BinOp::Add, Box::new(rhs)),
    Mul,
};

Mul: Expr = {
    <lhs: Mul> "*" <rhs: App> => Expr::BinOp(Box::new(lhs), BinOp::Mul, Box::new(rhs)),
    App,
};

App: Expr = {
    <fun: App> <arg: Primary> => Expr::App(Box::new(fun), Box::new(arg)),
    Primary,
}

Primary: Expr = {
    Num => Expr::Num(<>),
    Bool => Expr::Bool(<>),
    Ident => Expr::Val(<>),
    "(" Fun <ident:Ident> "->" <expr:Expr> ")" => Expr::Fun(ident, Box::new(expr)),
    "(" <Expr> ")",
};

Num: u32 = {
    r"[0-9]+" => u32::from_str(<>).unwrap(),
};

Bool: bool = {
    True => true,
    False => false,
}

Ident: String = {
    r"[a-zA-Z][a-zA-Z0-9]*" => <>.to_string(),
}

match {
    r"true" => True,
    r"false" => False,
    r"fun" => Fun,
} else {
    _,
}